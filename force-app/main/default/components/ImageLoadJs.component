<apex:component >
<script>

var caaApp = angular.module('caaApp',[]);


caaApp.controller('controllerANC', ['$scope','$window','$filter','serviceANC','serviceApplication',
        function ($scope,$window,$filter,serviceANC,serviceApplication) 
        {  

        $scope.Success = 0;
        $scope.Error = 0;            



        $scope.ProcessAccount= function(index)
        {
            
        
        
            if(!$scope.Accounts || $scope.Accounts.length == 0) 
            {
                $scope.Stop = false;
                $scope.Running = false;
                $scope.$apply();
                return;
            }
            else
            {
                $scope.Running = true;
            }
        
            //serviceApplication.LoadShow('Processing...');
            
            
            
            var id = $scope.Accounts[0];
            
            
            serviceANC.ProcessAccount(id)
                    .then(
                        function(result){
                
                $scope.Accounts.splice(0, 1);
                
                if(result.Success)
                    $scope.Success ++;
                else
                    $scope.Error ++;    
                
                if(!$scope.Stop)
                    setTimeout(function(){ $scope.ProcessAccount(); }, 10);
                else
                {
                    $scope.Running = false;
                    
                }    
                
                
                //serviceApplication.LoadHide(false);  
                        },
                        function(error){
                            serviceApplication.LoadHide(false);  
                        }
                    ); 
        }   
        
        $scope.GetAccountsToProcess= function()
        {
            //serviceApplication.LoadShow('Processing...');
            serviceANC.GetAccountsToProcess($scope.numAccounts, $scope.LastDigit)
                    .then(
                        function(result){
                if(result.Data){
                    $scope.Accounts = result.Data.Items;
                }
                //serviceApplication.LoadHide(false);  
                        },
                        function(error){
                            //serviceApplication.LoadHide(false);  
                        }
                    ); 
        }


        
        }
    ]);



caaApp.service('serviceANC', ['$q', '$rootScope', function ($q, $rootScope) {
       this.GetAccountsToProcess= function(num,lastDigit)
        {
            var deferred = $q.defer();
        Visualforce.remoting.timeout = 120000;
            CustomerImageLoad.GetAccountsToProcess(num,lastDigit,function(result, event){
                if(event.status){
                    deferred.resolve(result);
                }
                else {
                    deferred.reject(event);
                }     
            });
            return deferred.promise;
        }
        
        this.ProcessAccount = function(id)
        {
            var deferred = $q.defer();
        Visualforce.remoting.timeout = 120000;
            CustomerImageLoad.ProcessAccount(id,function(result, event){
                if(event.status){
                    deferred.resolve(result);
                }
                else {
                    deferred.reject(event);
                }     
            });
            return deferred.promise;
        }

   }]);
   









caaApp.service('serviceApplication', ['$q', '$rootScope', '$window', 'serviceMessageBroker', 
    function ($q, $rootScope, $window, serviceMessageBroker) {

    this.ShowRequestCount = 0;
            
    this.LoadShow = function(message){
        this.ShowRequestCount++;
        serviceMessageBroker.LoadShow(message);
    }

    this.LoadHide = function(forceHide){
        if(forceHide)
            this.ShowRequestCount = 0;
        if(this.ShowRequestCount > 0)
            this.ShowRequestCount--;
        if(this.ShowRequestCount == 0)
        {
            serviceMessageBroker.LoadHide();
            serviceMessageBroker.LoadHideComplete();
        }
    }

    this.LoadOpen = function()
    {
        if(this.ShowRequestCount > 0)
            return true;
        return false;
    }

    this.ModalShow = function(title, modalType){
        serviceMessageBroker.ModalShow(title, modalType);      
    }

    this.ModalHide = function(){
        serviceMessageBroker.ModalHide();
    }

    this.PrintHTML = function(htmlString)
    {
        if(htmlString)
        {
            var popupWindow = $window.open('', '_blank', 'width=800, height=600, directories=no, location=no, status=no');
            popupWindow.document.childNodes[0].innerHTML = '<html><head><link rel="stylesheet" type="text/css" href="test.css" /></head><body>' + htmlString + '</html>';
            popupWindow.print();
            popupWindow.document.close();
            popupWindow.close();
        }
        else
        {
            alert('Error: Print template is corrupt');
        }
    }

    this.ParseHTML = function(htmlString)
    {
        return jQuery.parseHTML(htmlString);
    }

    this.GetParameterByNameFromURL = function(name) 
    {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }

    this.CreateWebLog = function(objectId)
    {
        var deferred = $q.defer();
        Teller_Core_Controller.CreateWebLog(objectId, function (result, event) {            
            if (event.status) {
                deferred.resolve(result);
            }
            else {
                deferred.reject(event);
            }   
        });

        return deferred.promise;
    }

}]);    

caaApp.service('serviceMessageBroker', ['$q', '$rootScope', function ($q, $rootScope) {

    this.CustomerAccountsRefresh = function()
    {
        $rootScope.$emit('CustomerAccountsRefresh');
        $rootScope.$broadcast('CustomerAccountsRefresh');
    }

    this.CustomerRefresh = function()
    {
        $rootScope.$emit('CustomerRefresh');
        $rootScope.$broadcast('CustomerRefresh');
    }

    this.TellerActivitiesRefresh = function()
    {
        $rootScope.$emit('ActivitiesRefresh');
        $rootScope.$broadcast('ActivitiesRefresh');
    }

    this.TransactionHistoryRefresh = function(scope)
    {
        scope.$broadcast('RefreshTransactionHistory');
    }

    this.TellerTillRefresh = function()
    {
        $rootScope.$emit('TellerTillRefresh');
        $rootScope.$broadcast('TellerTillRefresh');
    }

    this.TellerMenuOptionsRefresh = function()
    {
        $rootScope.$emit('TellerMenuOptionsRefresh');
        $rootScope.$broadcast('TellerMenuOptionsRefresh');
    }

    this.ModalShow = function(title, modalType){
        $rootScope.$broadcast('ModalShow', {Title: title, ModalType: modalType});      
    }

    this.ModalHide = function(){
        $rootScope.$broadcast('ModalHide');
    }

    this.ModalClosed = function(modalType)
    {
        $rootScope.$emit('ModalClosed', modalType);
        $rootScope.$broadcast('ModalClosed', modalType);
    }

    this.LoadShow = function(message)
    {
        $rootScope.$broadcast('LoadShow', message);
    }

    this.LoadHide = function()
    {
        $rootScope.$broadcast('LoadHide');
    }

    this.LoadHideComplete = function()
    {
        $rootScope.$emit('LoadHideComplete');
        $rootScope.$broadcast('LoadHideComplete');
    }

}]);

</script>
</apex:component>